Moi Markku, TLS tulee siella yrityspuolella ja yritysverkoissakin kovasti lapi. Olen testannut sita, se toimii ja on hyva. Mutta kylla lisaa vaikeusastetta meille ja niille jotka iocomia kayttaa.Verkkoja vaan ei voi enaa olettaa turvalliseksi. Sama heijastuu DNS, DHCP ja muihin palveluihin, vaikka zero konfiguration MDNS vaikuttaisi yksinkertaiselta ja kivalta, niin tietoturvan puute tarkoittaa etta on mahdollista selektiivisesti rapmauttaa komponentteja verkossa. 

USB ja Blue tooth: Varsinaista omatekoista USB tukea en ole kirjoittanut, mutta ei sen kaytolle ole esteita jos mikrokontrollerin plattis tukee naita. Nama nakyy molemmissa paissa sarjaporttina vahan kuin sarjaporttina. Esim kaytossa ESP32 blue tooth tuki toimii niin etta sen kaynnistaa niin mikrokontroller nakyy blue tooth laitteena jonka pystyy valitsemaan, ja USB samaan tapaan. Eli naille joutuu kirjoittamaan oman stream wrapperin (yksinkertainen, mapittaa meidan stream kutsut ko platform kirjaston kutsuihin). Tein ESB32 blue toothille ja voi kannattanee tehda vaikka Arduino USB kirjastolle kun se on yleinen. Kaytannossa kaikille laitteille joissa nama on on valmiit kirjastot joilla naihin saa kirjoitettua tai luettua.

RS485 on sarjaportti siina missa TTL tasoinen tai RS232 tasoinen. Eli softan kannalta UART tai USART jota kaytetaan. Se miten kaytetaan riippuu taas kehitysymparistosta, yms. Arduino API on taas suunnilleen "standardoitu" jonka useimmat tukee, muttei aina jarin hyva. Kaytannossa kuitenkin usein joutuu (tai on paljon tehokkaampaa) sovittaa koodi suoraan UART piirin paalle. Piiri tuottaa keskeytyksia kun dataa tulee tai sita vastaanotetaan, sitten pitaa olla 256 tavun ring bufferit naiden keskeytysten perassa TX ja RX suuntaan ja ylospain stream API.

Win ja linux puolella kaytetaan kayttojarjestelman palveluja, eli on stream API joka mappaa sen kutsut ko kayttojarjestelman kutsuihin. Nain kannattaa melkein tehda kaikissa jos on kayttojarjestelma, jossa on hyva sarjaliikenne tuki. Ei tule niin hirveasti eri toteutuksia. 
Stream APIn paa headeri on eosal/extensions/stream/common/osal_stream.h joka maarittelee kourallisen funktioita jotka pitaa toteuttaa (tai mapata eteenpain kayttikseen tai muuhun valmiskirjastoon) etta datan saa kulkemaan sita kautta. Taman hetkisia kaytannon toteutuksia streameista on extensions/socket, ectensions/tls, extensions/serial ja extensions/bluetooth kansioissa. Eli iocom kutsuu vain stream rajapintaa, eosal (abstraktointikerros) sitten mappaa nama oikeaan transporttiin. Huomaa etta TLS on tassa mielessa vain transport, eika iocom kirjaston kannalta suoraan mutkista asiaa. Mutta se vaatii server sertificaatin, luotettun "authoriteetin" maarittelyn clientin paassa, kayttajatunnuksen ja salasanan (luotettu taho voi olla joko kovakoodatuna tai konfiguroituna io laitteen kayttoonotossa, kayttajatunnus/tunnussana voidaan generoida vaikka satunnaislukuna). Esim Amazonilla kameraa liittaessa kayttaja on hieman ihmeissaan jos ei ole tormannyt naihin aikaisemmin. Eli TLS:kaan ei ole vaike kunhan sen hyvin osaa. Mutta se on varmasti ongelma jos kehittaja (tai mahdollisesti kayttaja) ei tunne sita. Yrota/arvaa periaatteella ei sen kanssa paase mihinkaan. 

