Memory blocks 
180727, updated 22.6.2019/pekka
Communication is based on memory blocks. Device A stores data to be transferred into memory block. Communication maintains identical copy of the memory block in device B. Separate memory blocks are necessary to implement two directional communication.

A memory block is byte array which is copied from a device to another. Under the hood his is quite a bit more complex, since only changes are transferred over communication, there is compression and synchronization, but user of this library should not need to care about this. There can be multiple recipients of one memory block.  There are IOCOM API functions for allocating, accessing memory block parameters and content, for data transfer synchronization, and callbacks.



A memory block in device A is copied to identical memory block in device B. If the memory blocks have different size, the extra data is ignored.

Communication between two devices typically involves several memory blocks, for example IO board blocks could be "binary inputs", "analog inputs" and "binary outputs".  When deciding how to divide data into memory blocks, consider also synchronization and how often input data changes. If some data changes quickly and some is static, these should be in different groups. Data which need to be synchronized (transferred in specific order), like "my data array" and "data array ready" bit, need to be in the same memory block.


